
06_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00000506  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800146  00800146  000005e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b2  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a2  00000000  00000000  00001ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cf  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f7  00000000  00000000  00002f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b9  00000000  00000000  0000340b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003dc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e4       	ldi	r26, 0x46	; 70
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 34       	cpi	r26, 0x4C	; 76
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 81 02 	jmp	0x502	; 0x502 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
 */

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>
    
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	00 e3       	ldi	r16, 0x30	; 48
 206:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 48; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 208:	89 91       	ld	r24, Y+
 20a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
    lcd_init(LCD_DISP_ON);
    
	
	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 48; i++)
 20e:	c0 17       	cp	r28, r16
 210:	d1 07       	cpc	r29, r17
 212:	d1 f7       	brne	.-12     	; 0x208 <main+0x14>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	
		
	
    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0");
 222:	80 e3       	ldi	r24, 0x30	; 48
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	
	lcd_gotoxy(11, 0);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	8b e0       	ldi	r24, 0x0B	; 11
 22e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_puts("0"); //show square minutes	
 232:	86 e3       	ldi	r24, 0x36	; 54
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Enable interrupt and set the overflow prescaler to 16 ms
    TIM2_overflow_16ms();
 23a:	e1 eb       	ldi	r30, 0xB1	; 177
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	87 60       	ori	r24, 0x07	; 7
 242:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 244:	e0 e7       	ldi	r30, 0x70	; 112
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	81 60       	ori	r24, 0x01	; 1
 24c:	80 83       	st	Z, r24
	
	// Configure 8-bit Timer/Counter0 
	// Enable interrupt and set the overflow prescaler to 16 ms
	TIM0_overflow_16ms();
 24e:	85 b5       	in	r24, 0x25	; 37
 250:	8d 7f       	andi	r24, 0xFD	; 253
 252:	85 bd       	out	0x25, r24	; 37
 254:	85 b5       	in	r24, 0x25	; 37
 256:	85 60       	ori	r24, 0x05	; 5
 258:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 25a:	ee e6       	ldi	r30, 0x6E	; 110
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	81 60       	ori	r24, 0x01	; 1
 262:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 264:	78 94       	sei
 266:	ff cf       	rjmp	.-2      	; 0x266 <main+0x72>

00000268 <__vector_16>:
/**
 * ISR starts when Timer/Counter0 overflows. Update the progress bar on
 * LCD display every 16 ms.
 */
ISR(TIMER0_OVF_vect)
{
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31
    static uint8_t symbol = 0;
    static uint8_t position = 0;
	
    lcd_gotoxy(1 + position, 1);
 28a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <position.1952>
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_putc(symbol);
 296:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <symbol.1951>
 29a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
		
	symbol++;
 29e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <symbol.1951>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
	if (symbol >5)
 2a4:	86 30       	cpi	r24, 0x06	; 6
 2a6:	18 f4       	brcc	.+6      	; 0x2ae <__vector_16+0x46>
    static uint8_t position = 0;
	
    lcd_gotoxy(1 + position, 1);
    lcd_putc(symbol);
		
	symbol++;
 2a8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <symbol.1951>
 2ac:	07 c0       	rjmp	.+14     	; 0x2bc <__vector_16+0x54>
	if (symbol >5)
	{
		symbol = 0;
 2ae:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <symbol.1951>
		position++;
 2b2:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <position.1952>
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
 2b8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <position.1952>
	}
	   
	if (position > 9)
 2bc:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <position.1952>
 2c0:	8a 30       	cpi	r24, 0x0A	; 10
 2c2:	50 f0       	brcs	.+20     	; 0x2d8 <__vector_16+0x70>
	{
		position = 0;
 2c4:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <position.1952>
		lcd_gotoxy(1 + position, 1);
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts("          ");
 2d0:	88 e3       	ldi	r24, 0x38	; 56
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	}
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	00 d0       	rcall	.+0      	; 0x322 <__vector_9+0x28>
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
	static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;        // Tenths of a second
	static uint8_t secs = 0;        // Seconds
	static uint8_t minutes = 0;     // minutes
	static uint16_t square_minutes = 0;  //square minutes
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()
 326:	80 e2       	ldi	r24, 0x20	; 32
 328:	90 e2       	ldi	r25, 0x20	; 32
 32a:	9a 83       	std	Y+2, r25	; 0x02
 32c:	89 83       	std	Y+1, r24	; 0x01

	number_of_overflows++;
 32e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <number_of_overflows.1958>
 332:	8f 5f       	subi	r24, 0xFF	; 255
	if (number_of_overflows >= 6)
 334:	86 30       	cpi	r24, 0x06	; 6
 336:	18 f4       	brcc	.+6      	; 0x33e <__vector_9+0x44>
	static uint8_t secs = 0;        // Seconds
	static uint8_t minutes = 0;     // minutes
	static uint16_t square_minutes = 0;  //square minutes
	char lcd_string[2] = "  ";      // String for converting numbers by itoa()

	number_of_overflows++;
 338:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <number_of_overflows.1958>
 33c:	98 c0       	rjmp	.+304    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	if (number_of_overflows >= 6)
	{
		// Do this every 6 x 16 ms = 100 ms
		number_of_overflows = 0;
 33e:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <number_of_overflows.1958>
		
		tens++;
 342:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tens.1959>
 346:	8f 5f       	subi	r24, 0xFF	; 255
		if (tens > 9)
 348:	8a 30       	cpi	r24, 0x0A	; 10
 34a:	18 f4       	brcc	.+6      	; 0x352 <__vector_9+0x58>
	if (number_of_overflows >= 6)
	{
		// Do this every 6 x 16 ms = 100 ms
		number_of_overflows = 0;
		
		tens++;
 34c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <tens.1959>
 350:	41 c0       	rjmp	.+130    	; 0x3d4 <__vector_9+0xda>
		if (tens > 9)
		{
			tens = 0;
 352:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <tens.1959>
			secs++;
 356:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <secs.1960>
 35a:	8f 5f       	subi	r24, 0xFF	; 255
			if (secs > 59)
 35c:	8c 33       	cpi	r24, 0x3C	; 60
 35e:	18 f4       	brcc	.+6      	; 0x366 <__vector_9+0x6c>
		
		tens++;
		if (tens > 9)
		{
			tens = 0;
			secs++;
 360:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <secs.1960>
 364:	37 c0       	rjmp	.+110    	; 0x3d4 <__vector_9+0xda>
			if (secs > 59)
			{
				secs = 0;				
 366:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <secs.1960>
				lcd_gotoxy(4, 0);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_puts("00");
 372:	83 e4       	ldi	r24, 0x43	; 67
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				minutes++;
 37a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 37e:	8f 5f       	subi	r24, 0xFF	; 255
				if (minutes > 59)
 380:	8c 33       	cpi	r24, 0x3C	; 60
 382:	18 f4       	brcc	.+6      	; 0x38a <__vector_9+0x90>
			if (secs > 59)
			{
				secs = 0;				
				lcd_gotoxy(4, 0);
				lcd_puts("00");
				minutes++;
 384:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
 388:	12 c0       	rjmp	.+36     	; 0x3ae <__vector_9+0xb4>
				if (minutes > 59)
				{
					minutes = 0;					
 38a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__data_end>
					lcd_gotoxy(1, 0);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_puts("00");
 396:	83 e4       	ldi	r24, 0x43	; 67
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
					
					lcd_gotoxy(12, 0); //clear last number for next square value
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	8c e0       	ldi	r24, 0x0C	; 12
 3a2:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_puts("    ");					
 3a6:	8e e3       	ldi	r24, 0x3E	; 62
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
				}
				square_minutes = minutes * minutes;
 3ae:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3b2:	4a e0       	ldi	r20, 0x0A	; 10
 3b4:	be 01       	movw	r22, r28
 3b6:	6f 5f       	subi	r22, 0xFF	; 255
 3b8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ba:	88 9f       	mul	r24, r24
 3bc:	c0 01       	movw	r24, r0
 3be:	11 24       	eor	r1, r1
 3c0:	0e 94 4c 02 	call	0x498	; 0x498 <__itoa_ncheck>
				itoa(square_minutes, lcd_string, 10); // Convert decimal value to string
				lcd_gotoxy(11, 0);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	8b e0       	ldi	r24, 0x0B	; 11
 3c8:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_puts(lcd_string); //show square minutes
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3d4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tens.1959>
 3d8:	4a e0       	ldi	r20, 0x0A	; 10
 3da:	be 01       	movw	r22, r28
 3dc:	6f 5f       	subi	r22, 0xFF	; 255
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 4c 02 	call	0x498	; 0x498 <__itoa_ncheck>
			}
		}
		itoa(tens, lcd_string, 10); // Convert decimal value to string
		lcd_gotoxy(7, 0);
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	87 e0       	ldi	r24, 0x07	; 7
 3ea:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 3ee:	ce 01       	movw	r24, r28
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3f6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <secs.1960>
 3fa:	4a e0       	ldi	r20, 0x0A	; 10
 3fc:	be 01       	movw	r22, r28
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 4c 02 	call	0x498	; 0x498 <__itoa_ncheck>
		
		itoa(secs, lcd_string, 10); // Convert decimal value to string
		if (secs > 9)
 408:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <secs.1960>
 40c:	8a 30       	cpi	r24, 0x0A	; 10
 40e:	48 f0       	brcs	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			lcd_gotoxy(4, 0);
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	84 e0       	ldi	r24, 0x04	; 4
 414:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(lcd_string);
 418:	ce 01       	movw	r24, r28
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 420:	08 c0       	rjmp	.+16     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		}		 
		else
		{
			lcd_gotoxy(5, 0);
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	85 e0       	ldi	r24, 0x05	; 5
 426:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(lcd_string);
 42a:	ce 01       	movw	r24, r28
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 432:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 436:	4a e0       	ldi	r20, 0x0A	; 10
 438:	be 01       	movw	r22, r28
 43a:	6f 5f       	subi	r22, 0xFF	; 255
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 4c 02 	call	0x498	; 0x498 <__itoa_ncheck>
		}
		
		itoa(minutes, lcd_string, 10); // Convert decimal value to string		
		if (minutes > 9)
 444:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
 448:	8a 30       	cpi	r24, 0x0A	; 10
 44a:	48 f0       	brcs	.+18     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		{
			lcd_gotoxy(1, 0);
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(lcd_string);
 454:	ce 01       	movw	r24, r28
 456:	01 96       	adiw	r24, 0x01	; 1
 458:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 45c:	08 c0       	rjmp	.+16     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		} 
		else
		{
			lcd_gotoxy(2, 0);
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts(lcd_string);
 466:	ce 01       	movw	r24, r28
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		}	
		

	}
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <__itoa_ncheck>:
 498:	bb 27       	eor	r27, r27
 49a:	4a 30       	cpi	r20, 0x0A	; 10
 49c:	31 f4       	brne	.+12     	; 0x4aa <__itoa_ncheck+0x12>
 49e:	99 23       	and	r25, r25
 4a0:	22 f4       	brpl	.+8      	; 0x4aa <__itoa_ncheck+0x12>
 4a2:	bd e2       	ldi	r27, 0x2D	; 45
 4a4:	90 95       	com	r25
 4a6:	81 95       	neg	r24
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__utoa_common>

000004ae <__utoa_ncheck>:
 4ae:	bb 27       	eor	r27, r27

000004b0 <__utoa_common>:
 4b0:	fb 01       	movw	r30, r22
 4b2:	55 27       	eor	r21, r21
 4b4:	aa 27       	eor	r26, r26
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	aa 1f       	adc	r26, r26
 4bc:	a4 17       	cp	r26, r20
 4be:	10 f0       	brcs	.+4      	; 0x4c4 <__utoa_common+0x14>
 4c0:	a4 1b       	sub	r26, r20
 4c2:	83 95       	inc	r24
 4c4:	50 51       	subi	r21, 0x10	; 16
 4c6:	b9 f7       	brne	.-18     	; 0x4b6 <__utoa_common+0x6>
 4c8:	a0 5d       	subi	r26, 0xD0	; 208
 4ca:	aa 33       	cpi	r26, 0x3A	; 58
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <__utoa_common+0x20>
 4ce:	a9 5d       	subi	r26, 0xD9	; 217
 4d0:	a1 93       	st	Z+, r26
 4d2:	00 97       	sbiw	r24, 0x00	; 0
 4d4:	79 f7       	brne	.-34     	; 0x4b4 <__utoa_common+0x4>
 4d6:	b1 11       	cpse	r27, r1
 4d8:	b1 93       	st	Z+, r27
 4da:	11 92       	st	Z+, r1
 4dc:	cb 01       	movw	r24, r22
 4de:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <strrev>

000004e2 <strrev>:
 4e2:	dc 01       	movw	r26, r24
 4e4:	fc 01       	movw	r30, r24
 4e6:	67 2f       	mov	r22, r23
 4e8:	71 91       	ld	r23, Z+
 4ea:	77 23       	and	r23, r23
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <strrev+0x4>
 4ee:	32 97       	sbiw	r30, 0x02	; 2
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <strrev+0x18>
 4f2:	7c 91       	ld	r23, X
 4f4:	6d 93       	st	X+, r22
 4f6:	70 83       	st	Z, r23
 4f8:	62 91       	ld	r22, -Z
 4fa:	ae 17       	cp	r26, r30
 4fc:	bf 07       	cpc	r27, r31
 4fe:	c8 f3       	brcs	.-14     	; 0x4f2 <strrev+0x10>
 500:	08 95       	ret

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
