
02-leds-HM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069b  00000000  00000000  0000096d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a5  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019b  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000017fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>         // AVR device-specific IO definitions

int main(void)
{
	//LEDs are on pins PC5 to PC0 (6 total) alternative DDRC |= (1<<PC5)|(1<<PC4)|(1<<PC3)...
	DDRC |= (0b00111111); //set all LEDs as output
  80:	87 b1       	in	r24, 0x07	; 7
  82:	8f 63       	ori	r24, 0x3F	; 63
  84:	87 b9       	out	0x07, r24	; 7
	PORTC &= (0b11000000); //set off all LEDs  
  86:	88 b1       	in	r24, 0x08	; 8
  88:	80 7c       	andi	r24, 0xC0	; 192
  8a:	88 b9       	out	0x08, r24	; 8
		//rewriting PC7 (not used) and PC6 (defined as input with ext. pull up) does not matter
		
        //swift lighting LED to left
		for(uint8_t i = 0; i<6; i++)
		{
		PORTC = (1<<i);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	50 e0       	ldi	r21, 0x00	; 0
		_delay_ms(BLINK_DELAY);	
		}
		//swift lighting LED to right
		for(int8_t i = 0; i<4; i++)
		{
			PORTC = (u>>i);
  90:	f0 e1       	ldi	r31, 0x10	; 16
  92:	e8 e0       	ldi	r30, 0x08	; 8
  94:	74 e0       	ldi	r23, 0x04	; 4
  96:	62 e0       	ldi	r22, 0x02	; 2
/* Includes ----------------------------------------------------------*/
#include <util/delay.h>     // Functions for busy-wait delay loops
#include <avr/io.h>         // AVR device-specific IO definitions

int main(void)
{
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
		//rewriting PC7 (not used) and PC6 (defined as input with ext. pull up) does not matter
		
        //swift lighting LED to left
		for(uint8_t i = 0; i<6; i++)
		{
		PORTC = (1<<i);
  9c:	9a 01       	movw	r18, r20
  9e:	08 2e       	mov	r0, r24
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <main+0x26>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <main+0x22>
  aa:	28 b9       	out	0x08, r18	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	34 e3       	ldi	r19, 0x34	; 52
  b0:	ac e0       	ldi	r26, 0x0C	; 12
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	a0 40       	sbci	r26, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
  be:	01 96       	adiw	r24, 0x01	; 1
    while (1)
    {
		//rewriting PC7 (not used) and PC6 (defined as input with ext. pull up) does not matter
		
        //swift lighting LED to left
		for(uint8_t i = 0; i<6; i++)
  c0:	86 30       	cpi	r24, 0x06	; 6
  c2:	91 05       	cpc	r25, r1
  c4:	59 f7       	brne	.-42     	; 0x9c <main+0x1c>
		_delay_ms(BLINK_DELAY);	
		}
		//swift lighting LED to right
		for(int8_t i = 0; i<4; i++)
		{
			PORTC = (u>>i);
  c6:	f8 b9       	out	0x08, r31	; 8
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	34 e3       	ldi	r19, 0x34	; 52
  cc:	8c e0       	ldi	r24, 0x0C	; 12
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x58>
  d8:	00 00       	nop
  da:	e8 b9       	out	0x08, r30	; 8
  dc:	9f ef       	ldi	r25, 0xFF	; 255
  de:	a4 e3       	ldi	r26, 0x34	; 52
  e0:	2c e0       	ldi	r18, 0x0C	; 12
  e2:	91 50       	subi	r25, 0x01	; 1
  e4:	a0 40       	sbci	r26, 0x00	; 0
  e6:	20 40       	sbci	r18, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x62>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x6c>
  ec:	00 00       	nop
  ee:	78 b9       	out	0x08, r23	; 8
  f0:	3f ef       	ldi	r19, 0xFF	; 255
  f2:	84 e3       	ldi	r24, 0x34	; 52
  f4:	9c e0       	ldi	r25, 0x0C	; 12
  f6:	31 50       	subi	r19, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x76>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
 102:	68 b9       	out	0x08, r22	; 8
 104:	af ef       	ldi	r26, 0xFF	; 255
 106:	24 e3       	ldi	r18, 0x34	; 52
 108:	3c e0       	ldi	r19, 0x0C	; 12
 10a:	a1 50       	subi	r26, 0x01	; 1
 10c:	20 40       	sbci	r18, 0x00	; 0
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x8a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x94>
 114:	00 00       	nop
 116:	c0 cf       	rjmp	.-128    	; 0x98 <main+0x18>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
